[{"D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\index.js":"1","D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\reportWebVitals.js":"2","D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\App.js":"3","D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\components\\Data.js":"4","D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\components\\Effect.js":"5","D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\components\\Color.js":"6"},{"size":552,"mtime":1670264437060,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1670264437060,"results":"9","hashOfConfig":"8"},{"size":17336,"mtime":1670265581674,"results":"10","hashOfConfig":"8"},{"size":2499,"mtime":1670265501621,"results":"11","hashOfConfig":"8"},{"size":574,"mtime":1670265501621,"results":"12","hashOfConfig":"8"},{"size":277,"mtime":1670265411782,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p70fyr",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\index.js",[],[],"D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\reportWebVitals.js",[],[],"D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\App.js",["33"],[],"import { useEffect, useState } from \"react\";\nimport { powerUps, directions, colorPool } from \"./components/Data\";\nimport { EffectType } from \"./components/Effect\";\nimport { motion } from \"framer-motion\";\nimport \"./App.css\";\n/**\n * -------------------------------------------------------------------------------------\n * Useful links:\n *\n * Framer motion library(used for animations):\n * @link https://www.framer.com/docs/\n *\n * XP and Level Formula(I used the X: 0.07, Y: 2 example)\n * @link https://blog.jakelee.co.uk/converting-levels-into-xp-vice-versa/\n *\n * Framer-Motion tutorial:\n * @link https://youtu.be/GOuwOI-WSkE\n *\n * Hooks tutorial:\n * @link https://www.youtube.com/watch?v=TNhaISOUy6Q\n * -------------------------------------------------------------------------------------\n * Things To-Do:\n * - level provides no benefits currently\n * - more power-ups\n * - balancing of the power-up prices and effects\n * - currently, every color has the same probability of appearance, so color rarity based on level maybe?\n * - center the text of a power-up description if only one line long\n * - save and load game data (currently everything starts from the beginning on site refresh)\n * -------------------------------------------------------------------------------------\n * Known Issues:\n * -  circle can be clicked outside of the game box, currently there is\n *    a svg with a hole where the game window is located and the normal background outside of it (see circle-boundary-background.svg).\n *    In \".App-circleboundary\" css class the \"pointer-events\" prop is set to \"none\" so the component is\n *    ignored completely when clicked, all it does is cover the circles where they \n *    shouldn't be, the circles are still there though (perhaps a different solution needed)\n */\nfunction App() {\n  document.body.style.overflow = \"hidden\";\n  let ctr = 0; //counter for components' unique IDs\n\n  /**\n   * -----------------------------------------------------------------------------------\n   *  useState variables\n   * to change a value use the setter function\n   *\n   * overwriting goes like this:\n   *\n   * setFoo(value);\n   *\n   * updating based on previous value:\n   *\n   * setFoo((prev) => prev + value);\n   *\n   * NOTE: Don't use setters of useStates inside of any render code parts!\n   *       Do it only inside events like onClick. Otherwise it will keep updating\n   *       the value infinitely which will make the program crash.\n   *\n   * -----------------------------------------------------------------------------------\n   */\n  const [moneyCount, setMoneyCount] = useState(0); //money balance (initial 0)\n  const [multiplier, setMultiplier] = useState(1); //color value multiplier (initial 1)\n  const [machines, setMachines] = useState(0); //machines owned (inital 0)\n  const [growthPerMachine, setGrowthPerMachine] = useState(1.1); //income growth factor per machine owned (initial 1.1)\n  const [income, setIncome] = useState(100); //income amount per second (initial 100)\n  const [level, setLevel] = useState(0); //player level (initial 0)\n  const [xp, setXp] = useState(0); //player xp (initial 0)\n  const [nextLvXpRequired, setNextLvXpRequired] = useState(\n    Math.floor(Math.pow((level + 1) / 0.07, 2))\n  ); //xp required to level up (initial 204, see useful links on top for the formula explanation)\n  const [nextMachinePrice, setNextMachinePrice] = useState(1500); //price of the next machine (initial 1500)\n  const [nextMultiplierPrice, setNextMultiplierPrice] = useState(2000); //price of the next color multiplier upgrade (initial 2000)\n\n  /**\n   * This function generates a random number between min(incl.) and max(excl.)\n   *\n   * @param {number} min minimum value (inclusive)\n   * @param {number} max maximum value (exclusive)\n   * @returns random number in given range\n   */\n  function getRandom(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  /**\n   * Starts counting from 0 to Infinity in 100ms time intervals based on income useState\n   *\n   * @returns Money counter display\n   */\n  const MoneyCounter = ({ start = 0, end = Infinity }) => {\n    const updateMoneyCounter = () => {\n      setTimeout(\n        () => setMoneyCount((prev) => prev + Math.floor(income / 10)),\n        100\n      );\n    };\n    useEffect(() => {\n      let isMounted = true;\n      if (isMounted) {\n        updateMoneyCounter();\n      }\n\n      return () => (isMounted = false);\n    }, [end, start]);\n    return <div className=\"App-currency\">{moneyCount} $</div>;\n  };\n\n  /**\n   * This function takes a color hex value and a luminance value and converts it\n   * to a darker or brighter color\n   * (used to generate gradients for the circles in getGradient() function)\n   *\n   * @param {hex} hex hex code of a color\n   * @param {number} lum luminance value (negative makes the color darker, positive brighter)\n   * @returns hex value of the modified color\n   */\n  function changeColorLuminance(hex, lum) {\n    hex = String(hex).replace(/[^0-9a-f]/gi, \"\");\n    if (hex.length < 6) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    lum = lum || 0;\n\n    var result = \"#\",\n      c,\n      i;\n    for (i = 0; i < 3; i++) {\n      c = parseInt(hex.substr(i * 2, 2), 16);\n      c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);\n      result += (\"00\" + c).substr(c.length);\n    }\n\n    return result;\n  }\n\n  /**\n   * Takes a color and makes a radial gradient out of it\n   *\n   * @param {hex} color hex code of the color\n   * @returns radial gradient component\n   */\n  function getGradient(color) {\n    return (\n      <radialGradient id={color}>\n        <stop offset=\"0%\" stop-color={color} />\n        <stop offset=\"100%\" stop-color={changeColorLuminance(color, -0.35)} />\n      </radialGradient>\n    );\n  }\n\n  /**\n   * Renders a circle\n   * @param {number} index index of the color and the direction of the circle (stored in colorPool- and directions- arrays)\n   * @returns\n   */\n  function renderCircle(index) {\n    const id = (ctr++).toString(); //unique ID of the component\n    const color = colorPool[index]; //color of the circle in hex\n    /**\n     * This function determines what happens when a circle gets clicked.\n     * On click it adds money, xp and disappears for 10 seconds to be reused later\n     */\n    function handleClick() {\n      setMoneyCount((prev) => prev + color.points * multiplier);\n      setXp((prev) => prev + color.xp);\n      setLevel(Math.floor(0.07 * Math.sqrt(xp + color.xp)));\n      setNextLvXpRequired(\n        Math.floor(\n          Math.pow((Math.floor(0.07 * Math.sqrt(xp + color.xp)) + 1) / 0.07, 2)\n        )\n      );\n      const el = document.getElementById(id);\n      el.style.display = \"none\"; //make the circle invisible\n      setTimeout(() => {\n        document.getElementById(id).style.display = \"inline\"; //make the circle visible again after 10 seconds\n      }, 10000);\n    }\n    return (\n      <motion.svg\n        viewBox={\"0 0 100 100\"}\n        className=\"circle\"\n        id={id}\n        initial={{\n          x: `${Math.cos(directions[index]) * 40}vw`,\n          y: `${Math.sin(directions[index]) * 40 + 19}vw`,\n        }}\n        animate={{\n          x: `${Math.cos(directions[index + 1]) * 40}vw`,\n          y: `${Math.sin(directions[index + 1]) * 40 + 19}vw`,\n        }}\n        transition={{\n          repeat: Infinity,\n          duration: 7.5,\n          repeatDelay: getRandom(1, 5000) / 100,\n        }}\n        onClick={handleClick}\n        style={{\n          width: \"6vw\",\n          height: \"6vw\",\n          position: \"absolute\",\n        }}\n      >\n        <defs>{getGradient(color.name)}</defs>\n        <circle cx={\"50%\"} cy={\"50%\"} r={\"35%\"} fill={`url(#${color.name})`} />\n        <circle\n          cx={\"50%\"}\n          cy={\"50%\"}\n          r={\"60%\"}\n          fill={\"black\"}\n          opacity={0.001}\n        />\n      </motion.svg>\n    );\n  }\n  /**\n   * Renders given amount of circles\n   *\n   * @param {number} buffAmount amount of circles to be rendered\n   * @returns array of circle components\n   */\n  function renderCircles(buffAmount) {\n    const circleBuffer = [];\n    for (let i = 0; i < buffAmount; i++) {\n      let circle = renderCircle(i);\n      circleBuffer.push(circle);\n    }\n    return circleBuffer;\n  }\n\n  /**\n   * Renders the Plus-Button for color value multiplier\n   *\n   * @returns Plus-Button component\n   */\n  function renderMultiplierPlusButton() {\n    /**\n     * This function checks if the player has enough money\n     * and if true takes the required amount of money and increases\n     * the color value multiplier by 1\n     * It also increases the price of next multiplier upgrade by 40%\n     */\n    function handleClick() {\n      if (moneyCount >= nextMultiplierPrice) {\n        setMoneyCount((prev) => prev - nextMultiplierPrice);\n        setMultiplier((prev) => prev + 1);\n        setNextMultiplierPrice((prev) => Math.floor(prev * 1.4));\n      }\n    }\n    return (\n      <div onClick={handleClick}>\n        <motion.svg\n          className=\"Plus-ButtonMtp\"\n          style={{\n            filter: `${\n              moneyCount >= nextMultiplierPrice\n                ? \"grayscale(0%)\"\n                : \"grayscale(100%)\"\n            }`,\n          }}\n        />\n        <motion.svg\n          className=\"Plus-ButtonMtpH\"\n          style={{\n            filter: `${\n              moneyCount >= nextMultiplierPrice\n                ? \"grayscale(0%)\"\n                : \"grayscale(100%)\"\n            }`,\n          }}\n          opacity={0}\n          whileHover={{ opacity: 1 }}\n        />\n        <div\n          className=\"Plus-ButtonMtp-price\"\n          style={{\n            color: `${\n              moneyCount >= nextMultiplierPrice ? \"greenyellow\" : \"red\"\n            }`,\n          }}\n        >\n          {nextMultiplierPrice} $\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Renders the Plus-Button for the machines amount\n   *\n   * @returns Plus-Button component\n   */\n  function renderMachinesPlusButton() {\n    /**\n     * This function checks onClick if the player has enough money\n     * and if true takes the required amount of money, increases\n     * the machine amount by 1 and recalculates the automatic income amount\n     * It also increases the price of next multiplier upgrade by 60%\n     */\n    function handleClick() {\n      if (moneyCount >= nextMachinePrice) {\n        setMoneyCount((prev) => prev - nextMachinePrice);\n        setMachines((prev) => prev + 1);\n        setIncome(Math.floor(100 * Math.pow(growthPerMachine, machines + 1)));\n        setNextMachinePrice((prev) => Math.floor(prev * 1.6));\n      }\n    }\n    return (\n      <div onClick={handleClick}>\n        <motion.svg\n          className=\"Plus-ButtonMch\"\n          style={{\n            filter: `${\n              moneyCount >= nextMachinePrice\n                ? \"grayscale(0%)\"\n                : \"grayscale(100%)\"\n            }`,\n          }}\n        />\n        <motion.svg\n          className=\"Plus-ButtonMchH\"\n          style={{\n            filter: `${\n              moneyCount >= nextMachinePrice\n                ? \"grayscale(0%)\"\n                : \"grayscale(100%)\"\n            }`,\n          }}\n          opacity={0}\n          whileHover={{ opacity: 1 }}\n        />\n        <div\n          className=\"Plus-ButtonMch-price\"\n          style={{\n            color: `${moneyCount >= nextMachinePrice ? \"greenyellow\" : \"red\"}`,\n          }}\n        >\n          {nextMachinePrice} $\n        </div>\n      </div>\n    );\n  }\n  /**\n   * This function takes the index of a powerUp and checks\n   * if all the requirements have been met to unlock the power-up\n   *\n   * @param {number} index index in the powerUp array\n   * @returns true, if requirements are met, otherwise false\n   */\n  let hasMetPrerequisites = (index) => {\n    if (powerUps[index].prerequisites.length === 0) {\n      return true;\n    }\n    for (let i = 0; i < powerUps[index].prerequisites.length; i++) {\n      if (powerUps[powerUps[index].prerequisites[i]].acquired === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n  //initial array of available power-ups\n  const avlPwps = [];\n  for (let i = 0; i < powerUps.length; i++) {\n    if (powerUps[i].acquired === false && hasMetPrerequisites(i) === true) {\n      avlPwps.push(powerUps[i]);\n    }\n  }\n  const [availablePowerUps, setAvailablePowerUps] = useState(avlPwps); //useState for available power-ups\n\n  /**\n   * Renders an available power-up passed as argument\n   *\n   * @param {object} powerUp power-up to be rendered\n   * @returns power-up component\n   */\n  function renderPowerUp(powerUp) {\n    const id = (ctr++).toString(); //unique ID of the component\n    /**\n     * This function checks on click if the player\n     * has enough money to acquire a power-up,\n     * if yes sets the clicked power-up's acquired value to true\n     * updates the array with available power-ups\n     * and takes the required amount of money\n     * from the player's balance\n     *\n     * NOTE: Every new EffectType needs its own case inside this function\n     */\n    function handleClick() {\n      if (moneyCount >= powerUp.price) {\n        const el = document.getElementById(id);\n        powerUps.find((el) => el.id === powerUp.id).acquired = true;\n        const arr = [];\n        for (let i = 0; i < powerUps.length; i++) {\n          if (\n            powerUps[i].acquired === false &&\n            hasMetPrerequisites(i) === true\n          ) {\n            arr.push(powerUps[i]);\n          }\n        }\n        setAvailablePowerUps(arr);\n        setMoneyCount((prev) => prev - powerUp.price);\n        //case MachineEffectiveness:\n        if (powerUp.effect.type === EffectType.MachineEffectiveness) {\n          setGrowthPerMachine(\n            (prev) => Math.round((prev + powerUp.effect.value) * 100) / 100\n          );\n          setIncome(\n            Math.floor(\n              100 * Math.pow(growthPerMachine + powerUp.effect.value, machines)\n            )\n          );\n          //case ColorMultiplier\n        } else if (powerUp.effect.type === EffectType.ColorMultiplier) {\n          setMultiplier((prev) => prev + powerUp.effect.value);\n        }\n      }\n    }\n    return (\n      <div\n        className=\"PowerUp\"\n        id={id}\n        onClick={handleClick}\n        style={{\n          left: `calc(${\n            2 + 49 * (availablePowerUps.indexOf(powerUp) % 2 === 0 ? 0 : 1)\n          }%)`,\n          top: `calc(${\n            36 +\n            15.5 *\n              (availablePowerUps.indexOf(powerUp) % 2 === 0\n                ? availablePowerUps.indexOf(powerUp) === 0\n                  ? 0\n                  : availablePowerUps.indexOf(powerUp) / 2\n                : (availablePowerUps.indexOf(powerUp) - 1) / 2)\n          }%)`,\n          width: \"47%\",\n          height: \"14.2%\",\n          position: \"absolute\",\n        }}\n      >\n        <div className=\"PowerUp-description\">{powerUp.description}</div>\n\n        <div\n          className=\"PowerUp-price\"\n          style={{\n            color: `${moneyCount >= powerUp.price ? \"greenyellow\" : \"red\"}`,\n          }}\n        >\n          {powerUp.price} $\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Renders all power-ups from the availablePowerUps useState variable\n   *\n   * @returns array of power-up components\n   */\n  function renderPowerUps() {\n    const powerUpBuffer = [];\n    for (let i = 0; i < availablePowerUps.length; i++) {\n      let powerUp = renderPowerUp(availablePowerUps[i]);\n      powerUpBuffer.push(powerUp);\n      ctr++;\n    }\n\n    return powerUpBuffer;\n  }\n\n  /**\n   * Renders the xp-bar\n   *\n   * @returns xp-bar component\n   */\n  function renderXPBar() {\n    return (\n      <svg style={{ overflow: \"visible\" }}>\n        <rect width=\"20vw\" height=\"2.5vw\" rx=\"30\" fill=\"rgb(43, 28, 51)\" />\n        <rect\n          width={`${20 * (xp / nextLvXpRequired)}vw`}\n          height=\"2.5vw\"\n          rx=\"30\"\n          fill=\"white\"\n          opacity={0.7}\n        />\n        <rect\n          width=\"20vw\"\n          height=\"2.5vw\"\n          rx=\"30\"\n          fill=\"transparent\"\n          stroke=\"rgb(61, 42, 74)\"\n          stroke-width=\"0.5vw\"\n        />\n      </svg>\n    );\n  }\n  //Return statement of the entire App-function\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-game\">{renderCircles(200)}</div>\n\n        <div className=\"App-circleboundary\"></div>\n        <MoneyCounter />\n        <div className=\"App-upgrades\">\n          <div className=\"Upgrades-colorValue\">Farben-Wert:</div>\n          <div className=\"Upgrades-multiplier\">x{multiplier}</div>\n          {renderMultiplierPlusButton()}\n          <div className=\"Upgrades-machines\">Maschinen:</div>\n          <div className=\"Upgrades-machineAmount\">{machines}</div>\n          {renderMachinesPlusButton()}\n          <div className=\"Upgrades-income\">Einkommen:</div>\n          <div className=\"Upgrades-incomeAmount\">{income} $</div>\n          <div className=\"Upgrades-splitBar\" />\n          <div className=\"Upgrades-powerUps\">{renderPowerUps()}</div>\n        </div>\n        <div className=\"App-xpbar\">\n          {renderXPBar()}\n          <div className=\"App-xpbartext\">Lv: {level}</div>\n          <div className=\"App-xpbarxp\">\n            {xp}/{nextLvXpRequired}\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\components\\Data.js",[],[],"D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\components\\Effect.js",[],[],"D:\\Uni\\4. Semester\\SoftwareLab\\ColorClicker\\src\\components\\Color.js",[],[],{"ruleId":"34","severity":1,"message":"35","line":390,"column":15,"nodeType":"36","messageId":"37","endLine":390,"endColumn":17},"no-unused-vars","'el' is assigned a value but never used.","Identifier","unusedVar"]