[{"/Users/bugri99/Desktop/ColorClicker/src/index.js":"1","/Users/bugri99/Desktop/ColorClicker/src/reportWebVitals.js":"2","/Users/bugri99/Desktop/ColorClicker/src/App.js":"3"},{"size":535,"mtime":1669906527102,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1669906527102,"results":"6","hashOfConfig":"5"},{"size":3975,"mtime":1669906592328,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1puoass",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"/Users/bugri99/Desktop/ColorClicker/src/index.js",[],[],"/Users/bugri99/Desktop/ColorClicker/src/reportWebVitals.js",[],[],"/Users/bugri99/Desktop/ColorClicker/src/App.js",["18"],[],"import { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  document.body.style.overflow = \"hidden\";\n  const [count, setCount] = useState(0);\n  let ctr = 0;\n  const [multiplier, setMultiplier] = useState(1);\n  const [machines, setMachines] = useState(0);\n  const [income, setIncome] = useState(0);\n\n  function getRandom(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  function renderCircle(xPos, yPos, direction, value, color) {\n    const id = (ctr++).toString();\n    function handleClick() {\n      setCount((prev) => prev + value * multiplier);\n      const el = document.getElementById(id);\n      el.style.display = \"none\";\n    }\n    return (\n      <svg\n        className=\"circle\"\n        id={id}\n        onClick={handleClick}\n        style={{\n          left: `calc(${xPos}vw - 2vw)`,\n          top: `calc(${yPos}vw - 2vw)`,\n          width: '3vw',\n          height: '3vw',\n          position: \"absolute\",\n        }}\n      >\n        <circle cx={\"50%\"} cy={\"50%\"} r={\"50%\"} fill={color} />\n      </svg>\n    );\n  }\n  const colors = [\n    new Color(\"white\", 10),\n    new Color(\"green\", 25),\n    new Color(\"blue\", 50),\n    new Color(\"pink\", 75),\n    new Color(\"purple\", 100),\n    new Color(\"yellow\", 150),\n    new Color(\"red\", 300),\n  ];\n\n  function renderCircles(buffAmount) {\n    const circleBuffer = [];\n    for (let i = 0; i < buffAmount; i++) {\n      let color = colors[Math.floor(Math.random() * colors.length)];\n      let circle = renderCircle(\n        getRandom(3, 53),\n        getRandom(3, 40),\n        getRandom(0, 360),\n        color.points,\n        color.name\n      );\n      circleBuffer.push(circle);\n    }\n    return circleBuffer;\n  }\n  const [circles] = useState(renderCircles(15));\n\n\n  function renderMultiplierPlusButton() {\n    function handleClick() {\n      setMultiplier((prev) => prev + 1);\n    }\n    return (\n      <div className=\"Plus-ButtonMtp\" onClick={handleClick}/>\n    );\n  }\n  function renderMachinesPlusButton() {\n    function handleClick() {\n      setMachines((prev) => prev + 1);\n    }\n    return (\n      <div className=\"Plus-ButtonMch\" onClick={handleClick}/>\n    );\n  }\n  function renderPowerUp(row, col) {\n    function handleClick() {\n      //TODO\n    }\n    return (\n      <div className=\"PowerUp\" onClick={handleClick}  style={{\n        left: `calc(${1 + col * 13.5}vw)`,\n        top: `calc(${30.5 + row * 13}vh)`,\n        width: '16vw',\n        height: '11.5vh',\n        position: \"absolute\",\n      }}/>\n    );\n  }\n  function renderPowerUps() {\n    const powerUpBuffer = [];\n    for (let i = 0; i < 2; i++) {\n      for (let j = 0; j < 4; j++) {\n        let powerUp = renderPowerUp(j, i);\n        powerUpBuffer.push(powerUp);\n      }  \n  }\n  return powerUpBuffer;\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-currency\">{count} $</div>\n        <div className=\"App-upgrades\">\n          <div className=\"Upgrades-colorValue\">\n            Farben-Wert:\n          </div>\n          <div className=\"Upgrades-multiplier\">x{multiplier}</div>\n          {renderMultiplierPlusButton()}\n          <div className=\"Upgrades-machines\">\n            Maschinen:\n          </div>\n          <div className=\"Upgrades-machineAmount\">{machines}</div>\n          {renderMachinesPlusButton()}\n          <div className=\"Upgrades-income\">\n            Einkommen:\n          </div>\n          <div className=\"Upgrades-incomeAmount\">{income} $/s</div>\n          <div className=\"Upgrades-splitBar\"/>\n          <div className=\"Upgrades-powerUps\">{renderPowerUps()}</div>\n        </div>\n        <div className=\"App-game\">{circles}</div>\n       \n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\nclass Color {\n  name;\n  points;\n\n  constructor(name, points) {\n    this.name = name;\n    this.points = points;\n  }\n\n  static get name() {\n    return this.name;\n  }\n\n  static get points() {\n    return this.points;\n  }\n}\n",{"ruleId":"19","severity":1,"message":"20","line":10,"column":18,"nodeType":"21","messageId":"22","endLine":10,"endColumn":27},"no-unused-vars","'setIncome' is assigned a value but never used.","Identifier","unusedVar"]