{"ast":null,"code":"import { Color } from \"./Color\";\nimport { Effect, EffectType } from \"./Effect\";\n\n/**\r\n * This function generates a random number between min(incl.) and max(excl.)\r\n *\r\n * @param {number} min minimum value (inclusive)\r\n * @param {number} max maximum value (exclusive)\r\n * @returns random number in given range\r\n */\nfunction getRandom(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n//array of Color objects (hex code, monetary value, xp)\nconst colors = [new Color(\"#FFFFFF\", 10, 1),\n//white\nnew Color(\"#00FF00\", 25, 3),\n//green\nnew Color(\"#0000FF\", 50, 5),\n//blue\nnew Color(\"#FF748C\", 75, 10),\n//pink\nnew Color(\"#800080\", 100, 25),\n//purple\nnew Color(\"#FFFF00\", 150, 50),\n//yellow\nnew Color(\"#FF0000\", 300, 100) //red\n];\n\n//array of circles' movement directions (between 0 and 360 degrees)\nexport const directions = [];\nfor (let i = 0; i < 200; i++) {\n  directions.push(getRandom(0, 360));\n}\n\n//array of circles' colors (a random color from the colors array)\n//NEEDS REWORK\nexport const colorPool = [];\nfor (let i = 0; i < 200; i++) {\n  colorPool.push(colors[getRandom(0, 7)]);\n}\n\n/**\r\n * id: identification number of a power-up\r\n * description: text that will be displayed on the button\r\n * price: cost of the power-up\r\n * effect: effect of the power-up\r\n * prerequisites: IDs of required power-ups to unlock the power-up\r\n * acquired: has the power-up been bought already\r\n */\nexport const powerUps = [{\n  id: 0,\n  description: \"Farben-Wert +500%\",\n  price: 1500,\n  effect: new Effect(EffectType.ColorMultiplier, 5),\n  prerequisites: [],\n  acquired: false\n}, {\n  id: 1,\n  description: \"Farben-Wert +1000%\",\n  price: 20000,\n  effect: new Effect(EffectType.ColorMultiplier, 10),\n  prerequisites: [0],\n  acquired: false\n}, {\n  id: 2,\n  description: \"Maschinen-Effizienz +5%\",\n  price: 4000,\n  effect: new Effect(EffectType.MachineEffectiveness, 0.05),\n  prerequisites: [],\n  acquired: false\n}, {\n  id: 3,\n  description: \"Maschinen-Effizienz +10%\",\n  price: 100000,\n  effect: new Effect(EffectType.MachineEffectiveness, 0.1),\n  prerequisites: [0, 2],\n  acquired: false\n}, {\n  id: 3,\n  description: \"Maschinen-Effizienz +100%\",\n  price: 100000000,\n  effect: new Effect(EffectType.MachineEffectiveness, 1),\n  prerequisites: [3],\n  acquired: false\n}];","map":{"version":3,"names":["Color","Effect","EffectType","getRandom","min","max","Math","ceil","floor","random","colors","directions","i","push","colorPool","powerUps","id","description","price","effect","ColorMultiplier","prerequisites","acquired","MachineEffectiveness"],"sources":["D:/Uni/4. Semester/SoftwareLab/ColorClicker/src/components/Data.js"],"sourcesContent":["import { Color } from \"./Color\";\r\nimport { Effect, EffectType } from \"./Effect\";\r\n\r\n/**\r\n * This function generates a random number between min(incl.) and max(excl.)\r\n *\r\n * @param {number} min minimum value (inclusive)\r\n * @param {number} max maximum value (exclusive)\r\n * @returns random number in given range\r\n */\r\nfunction getRandom(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\n//array of Color objects (hex code, monetary value, xp)\r\nconst colors = [\r\n  new Color(\"#FFFFFF\", 10, 1), //white\r\n  new Color(\"#00FF00\", 25, 3), //green\r\n  new Color(\"#0000FF\", 50, 5), //blue\r\n  new Color(\"#FF748C\", 75, 10), //pink\r\n  new Color(\"#800080\", 100, 25), //purple\r\n  new Color(\"#FFFF00\", 150, 50), //yellow\r\n  new Color(\"#FF0000\", 300, 100), //red\r\n];\r\n\r\n//array of circles' movement directions (between 0 and 360 degrees)\r\nexport const directions = [];\r\n\r\nfor (let i = 0; i < 200; i++) {\r\n  directions.push(getRandom(0, 360));\r\n}\r\n\r\n//array of circles' colors (a random color from the colors array)\r\n//NEEDS REWORK\r\nexport const colorPool = [];\r\nfor (let i = 0; i < 200; i++) {\r\n  colorPool.push(colors[getRandom(0, 7)]);\r\n}\r\n\r\n/**\r\n * id: identification number of a power-up\r\n * description: text that will be displayed on the button\r\n * price: cost of the power-up\r\n * effect: effect of the power-up\r\n * prerequisites: IDs of required power-ups to unlock the power-up\r\n * acquired: has the power-up been bought already\r\n */\r\nexport const powerUps = [\r\n  {\r\n    id: 0,\r\n    description: \"Farben-Wert +500%\",\r\n    price: 1500,\r\n    effect: new Effect(EffectType.ColorMultiplier, 5),\r\n    prerequisites: [],\r\n    acquired: false,\r\n  },\r\n  {\r\n    id: 1,\r\n    description: \"Farben-Wert +1000%\",\r\n    price: 20000,\r\n    effect: new Effect(EffectType.ColorMultiplier, 10),\r\n    prerequisites: [0],\r\n    acquired: false,\r\n  },\r\n  {\r\n    id: 2,\r\n    description: \"Maschinen-Effizienz +5%\",\r\n    price: 4000,\r\n    effect: new Effect(EffectType.MachineEffectiveness, 0.05),\r\n    prerequisites: [],\r\n    acquired: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    description: \"Maschinen-Effizienz +10%\",\r\n    price: 100000,\r\n    effect: new Effect(EffectType.MachineEffectiveness, 0.1),\r\n    prerequisites: [0, 2],\r\n    acquired: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    description: \"Maschinen-Effizienz +100%\",\r\n    price: 100000000,\r\n    effect: new Effect(EffectType.MachineEffectiveness, 1),\r\n    prerequisites: [3],\r\n    acquired: false,\r\n  },\r\n];"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}