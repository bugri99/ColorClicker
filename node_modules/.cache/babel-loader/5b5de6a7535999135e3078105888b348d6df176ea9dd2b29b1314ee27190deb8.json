{"ast":null,"code":"var _jsxFileName = \"D:\\\\Uni\\\\4. Semester\\\\SoftwareLab\\\\ColorClicker\\\\src\\\\App.js\",\n  _s2 = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { powerUps, directions, colorPool } from \"./components/Data\";\nimport { EffectType } from \"./components/Effect\";\nimport { motion } from \"framer-motion\";\nimport \"./App.css\";\n/**\n * -------------------------------------------------------------------------------------\n * Useful links:\n *\n * Framer motion library(used for animations):\n * @link https://www.framer.com/docs/\n *\n * XP and Level Formula(I used the X: 0.07, Y: 2 example)\n * @link https://blog.jakelee.co.uk/converting-levels-into-xp-vice-versa/\n *\n * Framer-Motion tutorial:\n * @link https://youtu.be/GOuwOI-WSkE\n *\n * Hooks tutorial:\n * @link https://www.youtube.com/watch?v=TNhaISOUy6Q\n * -------------------------------------------------------------------------------------\n * Things To-Do:\n * - level provides no benefits currently\n * - more power-ups\n * - balancing of the power-up prices and effects\n * - currently, every color has the same probability of appearance, so color rarity based on level maybe?\n * - center the text of a power-up description if only one line long\n * - save and load game data (currently everything starts from the beginning on site refresh)\n * -------------------------------------------------------------------------------------\n * Known Issues:\n * -  circle can be clicked outside of the game box, currently there is\n *    a svg with a hole where the game window is located and the normal background outside of it (see circle-boundary-background.svg).\n *    In \".App-circleboundary\" css class the \"pointer-events\" prop is set to \"none\" so the component is\n *    ignored completely when clicked, all it does is cover the circles where they \n *    shouldn't be, the circles are still there though (perhaps a different solution needed)\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  document.body.style.overflow = \"hidden\";\n  let ctr = 0; //counter for components' unique IDs\n\n  /**\n   * -----------------------------------------------------------------------------------\n   *  useState variables\n   * to change a value use the setter function\n   *\n   * overwriting goes like this:\n   *\n   * setFoo(value);\n   *\n   * updating based on previous value:\n   *\n   * setFoo((prev) => prev + value);\n   *\n   * NOTE: Don't use setters of useStates inside of any render code parts!\n   *       Do it only inside events like onClick. Otherwise it will keep updating\n   *       the value infinitely which will make the program crash.\n   *\n   * -----------------------------------------------------------------------------------\n   */\n  const [moneyCount, setMoneyCount] = useState(0); //money balance (initial 0)\n  const [multiplier, setMultiplier] = useState(1); //color value multiplier (initial 1)\n  const [machines, setMachines] = useState(0); //machines owned (inital 0)\n  const [growthPerMachine, setGrowthPerMachine] = useState(1.1); //income growth factor per machine owned (initial 1.1)\n  const [income, setIncome] = useState(100); //income amount per second (initial 100)\n  const [level, setLevel] = useState(0); //player level (initial 0)\n  const [xp, setXp] = useState(0); //player xp (initial 0)\n  const [nextLvXpRequired, setNextLvXpRequired] = useState(Math.floor(Math.pow((level + 1) / 0.07, 2))); //xp required to level up (initial 204, see useful links on top for the formula explanation)\n  const [nextMachinePrice, setNextMachinePrice] = useState(1500); //price of the next machine (initial 1500)\n  const [nextMultiplierPrice, setNextMultiplierPrice] = useState(2000); //price of the next color multiplier upgrade (initial 2000)\n\n  /**\n   * This function generates a random number between min(incl.) and max(excl.)\n   *\n   * @param {number} min minimum value (inclusive)\n   * @param {number} max maximum value (exclusive)\n   * @returns random number in given range\n   */\n  function getRandom(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  /**\n   * Starts counting from 0 to Infinity in 100ms time intervals based on income useState\n   *\n   * @returns Money counter display\n   */\n  const MoneyCounter = _ref => {\n    _s();\n    let {\n      start = 0,\n      end = Infinity\n    } = _ref;\n    const updateMoneyCounter = () => {\n      setTimeout(() => setMoneyCount(prev => prev + Math.floor(income / 10)), 100);\n    };\n    useEffect(() => {\n      let isMounted = true;\n      if (isMounted) {\n        updateMoneyCounter();\n      }\n      return () => isMounted = false;\n    }, [end, start]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-currency\",\n      children: [moneyCount, \" $\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 12\n    }, this);\n  };\n\n  /**\n   * This function takes a color hex value and a luminance value and converts it\n   * to a darker or brighter color\n   * (used to generate gradients for the circles in getGradient() function)\n   *\n   * @param {hex} hex hex code of a color\n   * @param {number} lum luminance value (negative makes the color darker, positive brighter)\n   * @returns hex value of the modified color\n   */\n  _s(MoneyCounter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  function changeColorLuminance(hex, lum) {\n    hex = String(hex).replace(/[^0-9a-f]/gi, \"\");\n    if (hex.length < 6) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    lum = lum || 0;\n    var result = \"#\",\n      c,\n      i;\n    for (i = 0; i < 3; i++) {\n      c = parseInt(hex.substr(i * 2, 2), 16);\n      c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);\n      result += (\"00\" + c).substr(c.length);\n    }\n    return result;\n  }\n\n  /**\n   * Takes a color and makes a radial gradient out of it\n   *\n   * @param {hex} color hex code of the color\n   * @returns radial gradient component\n   */\n  function getGradient(color) {\n    return /*#__PURE__*/_jsxDEV(\"radialGradient\", {\n      id: color,\n      children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n        offset: \"0%\",\n        \"stop-color\": color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n        offset: \"100%\",\n        \"stop-color\": changeColorLuminance(color, -0.35)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  }\n\n  /**\n   * Renders a circle\n   * @param {number} index index of the color and the direction of the circle (stored in colorPool- and directions- arrays)\n   * @returns\n   */\n  function renderCircle(index) {\n    const id = (ctr++).toString(); //unique ID of the component\n    const color = colorPool[index]; //color of the circle in hex\n    /**\n     * This function determines what happens when a circle gets clicked.\n     * On click it adds money, xp and disappears for 10 seconds to be reused later\n     */\n    function handleClick() {\n      setMoneyCount(prev => prev + color.points * multiplier);\n      setXp(prev => prev + color.xp);\n      setLevel(Math.floor(0.07 * Math.sqrt(xp + color.xp)));\n      setNextLvXpRequired(Math.floor(Math.pow((Math.floor(0.07 * Math.sqrt(xp + color.xp)) + 1) / 0.07, 2)));\n      const el = document.getElementById(id);\n      el.style.display = \"none\"; //make the circle invisible\n      setTimeout(() => {\n        document.getElementById(id).style.display = \"inline\"; //make the circle visible again after 10 seconds\n      }, 10000);\n    }\n    return /*#__PURE__*/_jsxDEV(motion.svg, {\n      viewBox: \"0 0 100 100\",\n      className: \"circle\",\n      id: id,\n      initial: {\n        x: `${Math.cos(directions[index]) * 40}vw`,\n        y: `${Math.sin(directions[index]) * 40 + 19}vw`\n      },\n      animate: {\n        x: `${Math.cos(directions[index + 1]) * 40}vw`,\n        y: `${Math.sin(directions[index + 1]) * 40 + 19}vw`\n      },\n      transition: {\n        repeat: Infinity,\n        duration: 7.5,\n        repeatDelay: getRandom(1, 5000) / 100\n      },\n      onClick: handleClick,\n      style: {\n        width: \"6vw\",\n        height: \"6vw\",\n        position: \"absolute\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: getGradient(color.name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"50%\",\n        cy: \"50%\",\n        r: \"35%\",\n        fill: `url(#${color.name})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"50%\",\n        cy: \"50%\",\n        r: \"60%\",\n        fill: \"black\",\n        opacity: 0.001\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this);\n  }\n  /**\n   * Renders given amount of circles\n   *\n   * @param {number} buffAmount amount of circles to be rendered\n   * @returns array of circle components\n   */\n  function renderCircles(buffAmount) {\n    const circleBuffer = [];\n    for (let i = 0; i < buffAmount; i++) {\n      let circle = renderCircle(i);\n      circleBuffer.push(circle);\n    }\n    return circleBuffer;\n  }\n\n  /**\n   * Renders the Plus-Button for color value multiplier\n   *\n   * @returns Plus-Button component\n   */\n  function renderMultiplierPlusButton() {\n    /**\n     * This function checks if the player has enough money\n     * and if true takes the required amount of money and increases\n     * the color value multiplier by 1\n     * It also increases the price of next multiplier upgrade by 40%\n     */\n    function handleClick() {\n      if (moneyCount >= nextMultiplierPrice) {\n        setMoneyCount(prev => prev - nextMultiplierPrice);\n        setMultiplier(prev => prev + 1);\n        setNextMultiplierPrice(prev => Math.floor(prev * 1.4));\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleClick,\n      children: [/*#__PURE__*/_jsxDEV(motion.svg, {\n        className: \"Plus-ButtonMtp\",\n        style: {\n          filter: `${moneyCount >= nextMultiplierPrice ? \"grayscale(0%)\" : \"grayscale(100%)\"}`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(motion.svg, {\n        className: \"Plus-ButtonMtpH\",\n        style: {\n          filter: `${moneyCount >= nextMultiplierPrice ? \"grayscale(0%)\" : \"grayscale(100%)\"}`\n        },\n        opacity: 0,\n        whileHover: {\n          opacity: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Plus-ButtonMtp-price\",\n        style: {\n          color: `${moneyCount >= nextMultiplierPrice ? \"greenyellow\" : \"red\"}`\n        },\n        children: [nextMultiplierPrice, \" $\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this);\n  }\n\n  /**\n   * Renders the Plus-Button for the machines amount\n   *\n   * @returns Plus-Button component\n   */\n  function renderMachinesPlusButton() {\n    /**\n     * This function checks onClick if the player has enough money\n     * and if true takes the required amount of money, increases\n     * the machine amount by 1 and recalculates the automatic income amount\n     * It also increases the price of next multiplier upgrade by 60%\n     */\n    function handleClick() {\n      if (moneyCount >= nextMachinePrice) {\n        setMoneyCount(prev => prev - nextMachinePrice);\n        setMachines(prev => prev + 1);\n        setIncome(Math.floor(100 * Math.pow(growthPerMachine, machines + 1)));\n        setNextMachinePrice(prev => Math.floor(prev * 1.6));\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: handleClick,\n      children: [/*#__PURE__*/_jsxDEV(motion.svg, {\n        className: \"Plus-ButtonMch\",\n        style: {\n          filter: `${moneyCount >= nextMachinePrice ? \"grayscale(0%)\" : \"grayscale(100%)\"}`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(motion.svg, {\n        className: \"Plus-ButtonMchH\",\n        style: {\n          filter: `${moneyCount >= nextMachinePrice ? \"grayscale(0%)\" : \"grayscale(100%)\"}`\n        },\n        opacity: 0,\n        whileHover: {\n          opacity: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Plus-ButtonMch-price\",\n        style: {\n          color: `${moneyCount >= nextMachinePrice ? \"greenyellow\" : \"red\"}`\n        },\n        children: [nextMachinePrice, \" $\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this);\n  }\n  /**\n   * This function takes the index of a powerUp and checks\n   * if all the requirements have been met to unlock the power-up\n   *\n   * @param {number} index index in the powerUp array\n   * @returns true, if requirements are met, otherwise false\n   */\n  let hasMetPrerequisites = index => {\n    if (powerUps[index].prerequisites.length === 0) {\n      return true;\n    }\n    for (let i = 0; i < powerUps[index].prerequisites.length; i++) {\n      if (powerUps[powerUps[index].prerequisites[i]].acquired === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n  //initial array of available power-ups\n  const avlPwps = [];\n  for (let i = 0; i < powerUps.length; i++) {\n    if (powerUps[i].acquired === false && hasMetPrerequisites(i) === true) {\n      avlPwps.push(powerUps[i]);\n    }\n  }\n  const [availablePowerUps, setAvailablePowerUps] = useState(avlPwps); //useState for available power-ups\n\n  /**\n   * Renders an available power-up passed as argument\n   *\n   * @param {object} powerUp power-up to be rendered\n   * @returns power-up component\n   */\n  function renderPowerUp(powerUp) {\n    const id = (ctr++).toString(); //unique ID of the component\n    /**\n     * This function checks on click if the player\n     * has enough money to acquire a power-up,\n     * if yes sets the clicked power-up's acquired value to true\n     * updates the array with available power-ups\n     * and takes the required amount of money\n     * from the player's balance\n     *\n     * NOTE: Every new EffectType needs its own case inside this function\n     */\n    function handleClick() {\n      if (moneyCount >= powerUp.price) {\n        const el = document.getElementById(id);\n        powerUps.find(el => el.id === powerUp.id).acquired = true;\n        const arr = [];\n        for (let i = 0; i < powerUps.length; i++) {\n          if (powerUps[i].acquired === false && hasMetPrerequisites(i) === true) {\n            arr.push(powerUps[i]);\n          }\n        }\n        setAvailablePowerUps(arr);\n        setMoneyCount(prev => prev - powerUp.price);\n        //case MachineEffectiveness:\n        if (powerUp.effect.type === EffectType.MachineEffectiveness) {\n          setGrowthPerMachine(prev => Math.round((prev + powerUp.effect.value) * 100) / 100);\n          setIncome(Math.floor(100 * Math.pow(growthPerMachine + powerUp.effect.value, machines)));\n          //case ColorMultiplier\n        } else if (powerUp.effect.type === EffectType.ColorMultiplier) {\n          setMultiplier(prev => prev + powerUp.effect.value);\n        }\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PowerUp\",\n      id: id,\n      onClick: handleClick,\n      style: {\n        left: `calc(${2 + 49 * (availablePowerUps.indexOf(powerUp) % 2 === 0 ? 0 : 1)}%)`,\n        top: `calc(${36 + 15.5 * (availablePowerUps.indexOf(powerUp) % 2 === 0 ? availablePowerUps.indexOf(powerUp) === 0 ? 0 : availablePowerUps.indexOf(powerUp) / 2 : (availablePowerUps.indexOf(powerUp) - 1) / 2)}%)`,\n        width: \"47%\",\n        height: \"14.2%\",\n        position: \"absolute\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PowerUp-description\",\n        children: powerUp.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PowerUp-price\",\n        style: {\n          color: `${moneyCount >= powerUp.price ? \"greenyellow\" : \"red\"}`\n        },\n        children: [powerUp.price, \" $\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this);\n  }\n\n  /**\n   * Renders all power-ups from the availablePowerUps useState variable\n   *\n   * @returns array of power-up components\n   */\n  function renderPowerUps() {\n    const powerUpBuffer = [];\n    for (let i = 0; i < availablePowerUps.length; i++) {\n      let powerUp = renderPowerUp(availablePowerUps[i]);\n      powerUpBuffer.push(powerUp);\n      ctr++;\n    }\n    return powerUpBuffer;\n  }\n\n  /**\n   * Renders the xp-bar\n   *\n   * @returns xp-bar component\n   */\n  function renderXPBar() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        overflow: \"visible\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n        width: \"20vw\",\n        height: \"2.5vw\",\n        rx: \"30\",\n        fill: \"rgb(43, 28, 51)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n        width: `${20 * (xp / nextLvXpRequired)}vw`,\n        height: \"2.5vw\",\n        rx: \"30\",\n        fill: \"white\",\n        opacity: 0.7\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n        width: \"20vw\",\n        height: \"2.5vw\",\n        rx: \"30\",\n        fill: \"transparent\",\n        stroke: \"rgb(61, 42, 74)\",\n        \"stroke-width\": \"0.5vw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }, this);\n  }\n  //Return statement of the entire App-function\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-game\",\n        children: renderCircles(200)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-circleboundary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MoneyCounter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-upgrades\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Upgrades-colorValue\",\n          children: \"Farben-Wert:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Upgrades-multiplier\",\n          children: [\"x\", multiplier]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this), renderMultiplierPlusButton(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Upgrades-machines\",\n          children: \"Maschinen:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Upgrades-machineAmount\",\n          children: machines\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), renderMachinesPlusButton(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Upgrades-income\",\n          children: \"Einkommen:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Upgrades-incomeAmount\",\n          children: [income, \" $\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Upgrades-splitBar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Upgrades-powerUps\",\n          children: renderPowerUps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-xpbar\",\n        children: [renderXPBar(), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-xpbartext\",\n          children: [\"Lv: \", level]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-xpbarxp\",\n          children: [xp, \"/\", nextLvXpRequired]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 501,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"O3p1y40nlqh8WF804XUm2n+14RI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","powerUps","directions","colorPool","EffectType","motion","App","document","body","style","overflow","ctr","moneyCount","setMoneyCount","multiplier","setMultiplier","machines","setMachines","growthPerMachine","setGrowthPerMachine","income","setIncome","level","setLevel","xp","setXp","nextLvXpRequired","setNextLvXpRequired","Math","floor","pow","nextMachinePrice","setNextMachinePrice","nextMultiplierPrice","setNextMultiplierPrice","getRandom","min","max","ceil","random","MoneyCounter","start","end","Infinity","updateMoneyCounter","setTimeout","prev","isMounted","changeColorLuminance","hex","lum","String","replace","length","result","c","i","parseInt","substr","round","toString","getGradient","color","renderCircle","index","id","handleClick","points","sqrt","el","getElementById","display","x","cos","y","sin","repeat","duration","repeatDelay","width","height","position","name","renderCircles","buffAmount","circleBuffer","circle","push","renderMultiplierPlusButton","filter","opacity","renderMachinesPlusButton","hasMetPrerequisites","prerequisites","acquired","avlPwps","availablePowerUps","setAvailablePowerUps","renderPowerUp","powerUp","price","find","arr","effect","type","MachineEffectiveness","value","ColorMultiplier","left","indexOf","top","description","renderPowerUps","powerUpBuffer","renderXPBar"],"sources":["D:/Uni/4. Semester/SoftwareLab/ColorClicker/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { powerUps, directions, colorPool } from \"./components/Data\";\nimport { EffectType } from \"./components/Effect\";\nimport { motion } from \"framer-motion\";\nimport \"./App.css\";\n/**\n * -------------------------------------------------------------------------------------\n * Useful links:\n *\n * Framer motion library(used for animations):\n * @link https://www.framer.com/docs/\n *\n * XP and Level Formula(I used the X: 0.07, Y: 2 example)\n * @link https://blog.jakelee.co.uk/converting-levels-into-xp-vice-versa/\n *\n * Framer-Motion tutorial:\n * @link https://youtu.be/GOuwOI-WSkE\n *\n * Hooks tutorial:\n * @link https://www.youtube.com/watch?v=TNhaISOUy6Q\n * -------------------------------------------------------------------------------------\n * Things To-Do:\n * - level provides no benefits currently\n * - more power-ups\n * - balancing of the power-up prices and effects\n * - currently, every color has the same probability of appearance, so color rarity based on level maybe?\n * - center the text of a power-up description if only one line long\n * - save and load game data (currently everything starts from the beginning on site refresh)\n * -------------------------------------------------------------------------------------\n * Known Issues:\n * -  circle can be clicked outside of the game box, currently there is\n *    a svg with a hole where the game window is located and the normal background outside of it (see circle-boundary-background.svg).\n *    In \".App-circleboundary\" css class the \"pointer-events\" prop is set to \"none\" so the component is\n *    ignored completely when clicked, all it does is cover the circles where they \n *    shouldn't be, the circles are still there though (perhaps a different solution needed)\n */\nfunction App() {\n  document.body.style.overflow = \"hidden\";\n  let ctr = 0; //counter for components' unique IDs\n\n  /**\n   * -----------------------------------------------------------------------------------\n   *  useState variables\n   * to change a value use the setter function\n   *\n   * overwriting goes like this:\n   *\n   * setFoo(value);\n   *\n   * updating based on previous value:\n   *\n   * setFoo((prev) => prev + value);\n   *\n   * NOTE: Don't use setters of useStates inside of any render code parts!\n   *       Do it only inside events like onClick. Otherwise it will keep updating\n   *       the value infinitely which will make the program crash.\n   *\n   * -----------------------------------------------------------------------------------\n   */\n  const [moneyCount, setMoneyCount] = useState(0); //money balance (initial 0)\n  const [multiplier, setMultiplier] = useState(1); //color value multiplier (initial 1)\n  const [machines, setMachines] = useState(0); //machines owned (inital 0)\n  const [growthPerMachine, setGrowthPerMachine] = useState(1.1); //income growth factor per machine owned (initial 1.1)\n  const [income, setIncome] = useState(100); //income amount per second (initial 100)\n  const [level, setLevel] = useState(0); //player level (initial 0)\n  const [xp, setXp] = useState(0); //player xp (initial 0)\n  const [nextLvXpRequired, setNextLvXpRequired] = useState(\n    Math.floor(Math.pow((level + 1) / 0.07, 2))\n  ); //xp required to level up (initial 204, see useful links on top for the formula explanation)\n  const [nextMachinePrice, setNextMachinePrice] = useState(1500); //price of the next machine (initial 1500)\n  const [nextMultiplierPrice, setNextMultiplierPrice] = useState(2000); //price of the next color multiplier upgrade (initial 2000)\n\n  /**\n   * This function generates a random number between min(incl.) and max(excl.)\n   *\n   * @param {number} min minimum value (inclusive)\n   * @param {number} max maximum value (exclusive)\n   * @returns random number in given range\n   */\n  function getRandom(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n  /**\n   * Starts counting from 0 to Infinity in 100ms time intervals based on income useState\n   *\n   * @returns Money counter display\n   */\n  const MoneyCounter = ({ start = 0, end = Infinity }) => {\n    const updateMoneyCounter = () => {\n      setTimeout(\n        () => setMoneyCount((prev) => prev + Math.floor(income / 10)),\n        100\n      );\n    };\n    useEffect(() => {\n      let isMounted = true;\n      if (isMounted) {\n        updateMoneyCounter();\n      }\n\n      return () => (isMounted = false);\n    }, [end, start]);\n    return <div className=\"App-currency\">{moneyCount} $</div>;\n  };\n\n  /**\n   * This function takes a color hex value and a luminance value and converts it\n   * to a darker or brighter color\n   * (used to generate gradients for the circles in getGradient() function)\n   *\n   * @param {hex} hex hex code of a color\n   * @param {number} lum luminance value (negative makes the color darker, positive brighter)\n   * @returns hex value of the modified color\n   */\n  function changeColorLuminance(hex, lum) {\n    hex = String(hex).replace(/[^0-9a-f]/gi, \"\");\n    if (hex.length < 6) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    lum = lum || 0;\n\n    var result = \"#\",\n      c,\n      i;\n    for (i = 0; i < 3; i++) {\n      c = parseInt(hex.substr(i * 2, 2), 16);\n      c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);\n      result += (\"00\" + c).substr(c.length);\n    }\n\n    return result;\n  }\n\n  /**\n   * Takes a color and makes a radial gradient out of it\n   *\n   * @param {hex} color hex code of the color\n   * @returns radial gradient component\n   */\n  function getGradient(color) {\n    return (\n      <radialGradient id={color}>\n        <stop offset=\"0%\" stop-color={color} />\n        <stop offset=\"100%\" stop-color={changeColorLuminance(color, -0.35)} />\n      </radialGradient>\n    );\n  }\n\n  /**\n   * Renders a circle\n   * @param {number} index index of the color and the direction of the circle (stored in colorPool- and directions- arrays)\n   * @returns\n   */\n  function renderCircle(index) {\n    const id = (ctr++).toString(); //unique ID of the component\n    const color = colorPool[index]; //color of the circle in hex\n    /**\n     * This function determines what happens when a circle gets clicked.\n     * On click it adds money, xp and disappears for 10 seconds to be reused later\n     */\n    function handleClick() {\n      setMoneyCount((prev) => prev + color.points * multiplier);\n      setXp((prev) => prev + color.xp);\n      setLevel(Math.floor(0.07 * Math.sqrt(xp + color.xp)));\n      setNextLvXpRequired(\n        Math.floor(\n          Math.pow((Math.floor(0.07 * Math.sqrt(xp + color.xp)) + 1) / 0.07, 2)\n        )\n      );\n      const el = document.getElementById(id);\n      el.style.display = \"none\"; //make the circle invisible\n      setTimeout(() => {\n        document.getElementById(id).style.display = \"inline\"; //make the circle visible again after 10 seconds\n      }, 10000);\n    }\n    return (\n      <motion.svg\n        viewBox={\"0 0 100 100\"}\n        className=\"circle\"\n        id={id}\n        initial={{\n          x: `${Math.cos(directions[index]) * 40}vw`,\n          y: `${Math.sin(directions[index]) * 40 + 19}vw`,\n        }}\n        animate={{\n          x: `${Math.cos(directions[index + 1]) * 40}vw`,\n          y: `${Math.sin(directions[index + 1]) * 40 + 19}vw`,\n        }}\n        transition={{\n          repeat: Infinity,\n          duration: 7.5,\n          repeatDelay: getRandom(1, 5000) / 100,\n        }}\n        onClick={handleClick}\n        style={{\n          width: \"6vw\",\n          height: \"6vw\",\n          position: \"absolute\",\n        }}\n      >\n        <defs>{getGradient(color.name)}</defs>\n        <circle cx={\"50%\"} cy={\"50%\"} r={\"35%\"} fill={`url(#${color.name})`} />\n        <circle\n          cx={\"50%\"}\n          cy={\"50%\"}\n          r={\"60%\"}\n          fill={\"black\"}\n          opacity={0.001}\n        />\n      </motion.svg>\n    );\n  }\n  /**\n   * Renders given amount of circles\n   *\n   * @param {number} buffAmount amount of circles to be rendered\n   * @returns array of circle components\n   */\n  function renderCircles(buffAmount) {\n    const circleBuffer = [];\n    for (let i = 0; i < buffAmount; i++) {\n      let circle = renderCircle(i);\n      circleBuffer.push(circle);\n    }\n    return circleBuffer;\n  }\n\n  /**\n   * Renders the Plus-Button for color value multiplier\n   *\n   * @returns Plus-Button component\n   */\n  function renderMultiplierPlusButton() {\n    /**\n     * This function checks if the player has enough money\n     * and if true takes the required amount of money and increases\n     * the color value multiplier by 1\n     * It also increases the price of next multiplier upgrade by 40%\n     */\n    function handleClick() {\n      if (moneyCount >= nextMultiplierPrice) {\n        setMoneyCount((prev) => prev - nextMultiplierPrice);\n        setMultiplier((prev) => prev + 1);\n        setNextMultiplierPrice((prev) => Math.floor(prev * 1.4));\n      }\n    }\n    return (\n      <div onClick={handleClick}>\n        <motion.svg\n          className=\"Plus-ButtonMtp\"\n          style={{\n            filter: `${\n              moneyCount >= nextMultiplierPrice\n                ? \"grayscale(0%)\"\n                : \"grayscale(100%)\"\n            }`,\n          }}\n        />\n        <motion.svg\n          className=\"Plus-ButtonMtpH\"\n          style={{\n            filter: `${\n              moneyCount >= nextMultiplierPrice\n                ? \"grayscale(0%)\"\n                : \"grayscale(100%)\"\n            }`,\n          }}\n          opacity={0}\n          whileHover={{ opacity: 1 }}\n        />\n        <div\n          className=\"Plus-ButtonMtp-price\"\n          style={{\n            color: `${\n              moneyCount >= nextMultiplierPrice ? \"greenyellow\" : \"red\"\n            }`,\n          }}\n        >\n          {nextMultiplierPrice} $\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Renders the Plus-Button for the machines amount\n   *\n   * @returns Plus-Button component\n   */\n  function renderMachinesPlusButton() {\n    /**\n     * This function checks onClick if the player has enough money\n     * and if true takes the required amount of money, increases\n     * the machine amount by 1 and recalculates the automatic income amount\n     * It also increases the price of next multiplier upgrade by 60%\n     */\n    function handleClick() {\n      if (moneyCount >= nextMachinePrice) {\n        setMoneyCount((prev) => prev - nextMachinePrice);\n        setMachines((prev) => prev + 1);\n        setIncome(Math.floor(100 * Math.pow(growthPerMachine, machines + 1)));\n        setNextMachinePrice((prev) => Math.floor(prev * 1.6));\n      }\n    }\n    return (\n      <div onClick={handleClick}>\n        <motion.svg\n          className=\"Plus-ButtonMch\"\n          style={{\n            filter: `${\n              moneyCount >= nextMachinePrice\n                ? \"grayscale(0%)\"\n                : \"grayscale(100%)\"\n            }`,\n          }}\n        />\n        <motion.svg\n          className=\"Plus-ButtonMchH\"\n          style={{\n            filter: `${\n              moneyCount >= nextMachinePrice\n                ? \"grayscale(0%)\"\n                : \"grayscale(100%)\"\n            }`,\n          }}\n          opacity={0}\n          whileHover={{ opacity: 1 }}\n        />\n        <div\n          className=\"Plus-ButtonMch-price\"\n          style={{\n            color: `${moneyCount >= nextMachinePrice ? \"greenyellow\" : \"red\"}`,\n          }}\n        >\n          {nextMachinePrice} $\n        </div>\n      </div>\n    );\n  }\n  /**\n   * This function takes the index of a powerUp and checks\n   * if all the requirements have been met to unlock the power-up\n   *\n   * @param {number} index index in the powerUp array\n   * @returns true, if requirements are met, otherwise false\n   */\n  let hasMetPrerequisites = (index) => {\n    if (powerUps[index].prerequisites.length === 0) {\n      return true;\n    }\n    for (let i = 0; i < powerUps[index].prerequisites.length; i++) {\n      if (powerUps[powerUps[index].prerequisites[i]].acquired === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n  //initial array of available power-ups\n  const avlPwps = [];\n  for (let i = 0; i < powerUps.length; i++) {\n    if (powerUps[i].acquired === false && hasMetPrerequisites(i) === true) {\n      avlPwps.push(powerUps[i]);\n    }\n  }\n  const [availablePowerUps, setAvailablePowerUps] = useState(avlPwps); //useState for available power-ups\n\n  /**\n   * Renders an available power-up passed as argument\n   *\n   * @param {object} powerUp power-up to be rendered\n   * @returns power-up component\n   */\n  function renderPowerUp(powerUp) {\n    const id = (ctr++).toString(); //unique ID of the component\n    /**\n     * This function checks on click if the player\n     * has enough money to acquire a power-up,\n     * if yes sets the clicked power-up's acquired value to true\n     * updates the array with available power-ups\n     * and takes the required amount of money\n     * from the player's balance\n     *\n     * NOTE: Every new EffectType needs its own case inside this function\n     */\n    function handleClick() {\n      if (moneyCount >= powerUp.price) {\n        const el = document.getElementById(id);\n        powerUps.find((el) => el.id === powerUp.id).acquired = true;\n        const arr = [];\n        for (let i = 0; i < powerUps.length; i++) {\n          if (\n            powerUps[i].acquired === false &&\n            hasMetPrerequisites(i) === true\n          ) {\n            arr.push(powerUps[i]);\n          }\n        }\n        setAvailablePowerUps(arr);\n        setMoneyCount((prev) => prev - powerUp.price);\n        //case MachineEffectiveness:\n        if (powerUp.effect.type === EffectType.MachineEffectiveness) {\n          setGrowthPerMachine(\n            (prev) => Math.round((prev + powerUp.effect.value) * 100) / 100\n          );\n          setIncome(\n            Math.floor(\n              100 * Math.pow(growthPerMachine + powerUp.effect.value, machines)\n            )\n          );\n          //case ColorMultiplier\n        } else if (powerUp.effect.type === EffectType.ColorMultiplier) {\n          setMultiplier((prev) => prev + powerUp.effect.value);\n        }\n      }\n    }\n    return (\n      <div\n        className=\"PowerUp\"\n        id={id}\n        onClick={handleClick}\n        style={{\n          left: `calc(${\n            2 + 49 * (availablePowerUps.indexOf(powerUp) % 2 === 0 ? 0 : 1)\n          }%)`,\n          top: `calc(${\n            36 +\n            15.5 *\n              (availablePowerUps.indexOf(powerUp) % 2 === 0\n                ? availablePowerUps.indexOf(powerUp) === 0\n                  ? 0\n                  : availablePowerUps.indexOf(powerUp) / 2\n                : (availablePowerUps.indexOf(powerUp) - 1) / 2)\n          }%)`,\n          width: \"47%\",\n          height: \"14.2%\",\n          position: \"absolute\",\n        }}\n      >\n        <div className=\"PowerUp-description\">{powerUp.description}</div>\n\n        <div\n          className=\"PowerUp-price\"\n          style={{\n            color: `${moneyCount >= powerUp.price ? \"greenyellow\" : \"red\"}`,\n          }}\n        >\n          {powerUp.price} $\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Renders all power-ups from the availablePowerUps useState variable\n   *\n   * @returns array of power-up components\n   */\n  function renderPowerUps() {\n    const powerUpBuffer = [];\n    for (let i = 0; i < availablePowerUps.length; i++) {\n      let powerUp = renderPowerUp(availablePowerUps[i]);\n      powerUpBuffer.push(powerUp);\n      ctr++;\n    }\n\n    return powerUpBuffer;\n  }\n\n  /**\n   * Renders the xp-bar\n   *\n   * @returns xp-bar component\n   */\n  function renderXPBar() {\n    return (\n      <svg style={{ overflow: \"visible\" }}>\n        <rect width=\"20vw\" height=\"2.5vw\" rx=\"30\" fill=\"rgb(43, 28, 51)\" />\n        <rect\n          width={`${20 * (xp / nextLvXpRequired)}vw`}\n          height=\"2.5vw\"\n          rx=\"30\"\n          fill=\"white\"\n          opacity={0.7}\n        />\n        <rect\n          width=\"20vw\"\n          height=\"2.5vw\"\n          rx=\"30\"\n          fill=\"transparent\"\n          stroke=\"rgb(61, 42, 74)\"\n          stroke-width=\"0.5vw\"\n        />\n      </svg>\n    );\n  }\n  //Return statement of the entire App-function\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-game\">{renderCircles(200)}</div>\n\n        <div className=\"App-circleboundary\"></div>\n        <MoneyCounter />\n        <div className=\"App-upgrades\">\n          <div className=\"Upgrades-colorValue\">Farben-Wert:</div>\n          <div className=\"Upgrades-multiplier\">x{multiplier}</div>\n          {renderMultiplierPlusButton()}\n          <div className=\"Upgrades-machines\">Maschinen:</div>\n          <div className=\"Upgrades-machineAmount\">{machines}</div>\n          {renderMachinesPlusButton()}\n          <div className=\"Upgrades-income\">Einkommen:</div>\n          <div className=\"Upgrades-incomeAmount\">{income} $</div>\n          <div className=\"Upgrades-splitBar\" />\n          <div className=\"Upgrades-powerUps\">{renderPowerUps()}</div>\n        </div>\n        <div className=\"App-xpbar\">\n          {renderXPBar()}\n          <div className=\"App-xpbartext\">Lv: {level}</div>\n          <div className=\"App-xpbarxp\">\n            {xp}/{nextLvXpRequired}\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}